// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

model User {
  walletAddress String   @id @unique
  username      String?  @unique
  fullName      String?
  imageUrl      String?
  age           Int
  gender        String
  occupation    String
  contactInfo   String
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  policies Policy[]
  claims   Claim[]
}

enum PolicyStatus {
  All
  Active
  Expired
  PendingPayment
  Claimed
  Rejected
}

model Policy {
  id                      String       @id @default(uuid())
  policyIdOnchain         String?      @unique
  walletAddress           String
  premium                 Decimal      @db.Decimal(15, 2)
  totalPremium            Decimal      @db.Decimal(15, 2)
  coverageAmount          Decimal      @db.Decimal(15, 2)
  status                  PolicyStatus
  coverageStartDate       DateTime
  coverageEndDate         DateTime
  purchaseTransactionHash String? /// TX hash when user purchases the policy
  contractCreationHash    String? /// TX hash when smart contract is deployed or linked
  contractAddress         String
  documentUrl             String?
  planTypeId              Int
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  user     User       @relation(fields: [walletAddress], references: [walletAddress])
  planType PolicyType @relation(fields: [planTypeId], references: [id])
  claims   Claim[]

  flightPolicy   FlightPolicy?
  rainfallPolicy RainfallPolicy?
  healthPolicy   HealthPolicy?
  LifePolicy     LifePolicy?

  @@index([walletAddress])
}

enum ClaimType {
  HEALTH
  LIFE
  FLIGHT
  RAINFALL
}

model Claim {
  id                     String      @id @default(uuid())
  walletAddress          String
  policyId               String
  policyIdOnchain        String?     @unique
  subject                String
  description            String
  dateOfIncident         DateTime
  amount                 Decimal     @db.Decimal(10, 2)
  claimedTransactionHash String?     @unique
  documentUrl            String?
  status                 ClaimStatus @default(PENDING)
  contractAddress        String?
  approvedDate           DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  type                   ClaimType   @default(HEALTH)

  user   User   @relation(fields: [walletAddress], references: [walletAddress])
  policy Policy @relation(fields: [policyId], references: [id])
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

model FlightPolicy {
  id             String   @id @default(uuid())
  policyId       String   @unique
  airline        String
  flightNumber   String
  depAirport     String
  arrAirport     String
  depTime        String
  flightDate     DateTime
  depCountry     String
  arrCountry     String
  coverageAmount Decimal  @db.Decimal(10, 2)
  numPersons     Int
  createdAt      DateTime @default(now())
  policy         Policy   @relation(fields: [policyId], references: [id])
}

// Health Insurance Policy
model HealthPolicy {
  id                    String            @id @default(uuid())
  policyId              String            @unique
  preExistingConditions String?
  medicalCoverage       Decimal?          @db.Decimal(10, 5)
  bmi                   Decimal?          @db.Decimal(5, 2)
  smokingStatus         SmokingStatus
  exerciseFrequency     ExerciseFrequency
  expectedNumber        Int?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  policy                Policy            @relation(fields: [policyId], references: [id]) // Link to Policy model

  @@index([policyId])
}

// Life Insurance Policy
model LifePolicy {
  id                  String         @id @default(uuid())
  policyId            String         @unique
  occupation          String
  beneficiaryName     String
  beneficiaryRelation String
  beneficiaryContact  String
  policyTerm          Int
  policyType          LifePolicyType
  medicalHistory      String?
  lifestyleRisk       LifestyleRisk
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  policy              Policy         @relation(fields: [policyId], references: [id]) // Link to Policy model

  @@index([policyId])
}

enum SmokingStatus {
  NEVER
  FORMER
  CURRENT
}

enum ExerciseFrequency {
  NONE
  LIGHT
  MODERATE
  HEAVY
}

// Enums for Life Insurance
enum LifePolicyType {
  TERM
  WHOLE
  UNIVERSAL
  VARIABLE
}

enum LifestyleRisk {
  LOW
  MEDIUM
  HIGH
}

model RainfallPolicy {
  id       String  @id @default(uuid())
  policyId String  @unique
  location String
  rainfall Decimal @db.Decimal(5, 2)
  policy   Policy  @relation(fields: [policyId], references: [id])
}

model PolicyType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  policies Policy[]
}
