/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PolicyBase {
  export type ClaimRequestStruct = {
    policyId: BytesLike;
    amount: BigNumberish;
    documentHash: string;
    isPending: boolean;
    createdAt: BigNumberish;
    expiryTimestamp: BigNumberish;
  };

  export type ClaimRequestStructOutput = [
    policyId: string,
    amount: bigint,
    documentHash: string,
    isPending: boolean,
    createdAt: bigint,
    expiryTimestamp: bigint
  ] & {
    policyId: string;
    amount: bigint;
    documentHash: string;
    isPending: boolean;
    createdAt: bigint;
    expiryTimestamp: bigint;
  };

  export type PolicyStruct = {
    policyId: BytesLike;
    owner: AddressLike;
    premium: BigNumberish;
    sumAssured: BigNumberish;
    expiry: BigNumberish;
    isActive: boolean;
    isClaimed: boolean;
    createdAt: BigNumberish;
  };

  export type PolicyStructOutput = [
    policyId: string,
    owner: string,
    premium: bigint,
    sumAssured: bigint,
    expiry: bigint,
    isActive: boolean,
    isClaimed: boolean,
    createdAt: bigint
  ] & {
    policyId: string;
    owner: string;
    premium: bigint;
    sumAssured: bigint;
    expiry: bigint;
    isActive: boolean;
    isClaimed: boolean;
    createdAt: bigint;
  };
}

export interface PolicyBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "approveClaim"
      | "cancelPolicy"
      | "claimExpiryPeriod"
      | "emergencyWithdraw"
      | "fileClaim"
      | "getClaim"
      | "getPolicy"
      | "getRoleAdmin"
      | "grantAdminRole"
      | "grantRole"
      | "hasRole"
      | "markExpiredPolicy"
      | "purchasePolicy"
      | "renewPolicy"
      | "renounceRole"
      | "revokeAdminRole"
      | "revokeRole"
      | "setClaimExpiryPeriod"
      | "setTrustedSigner"
      | "supportsInterface"
      | "trustedSigner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminGranted"
      | "ClaimApproved"
      | "ClaimExpiryPeriodUpdated"
      | "ClaimFiled"
      | "PolicyCancelled"
      | "PolicyExpired"
      | "PolicyPurchased"
      | "PolicyRenewed"
      | "RefundIssued"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TrustedSignerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPolicy",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExpiryPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fileClaim",
    values: [BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getClaim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markExpiredPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePolicy",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renewPolicy",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSigner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fileClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markExpiredPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSigner",
    data: BytesLike
  ): Result;
}

export namespace AdminGrantedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimApprovedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [policyId: string, owner: string, amount: bigint];
  export interface OutputObject {
    policyId: string;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimExpiryPeriodUpdatedEvent {
  export type InputTuple = [oldPeriod: BigNumberish, newPeriod: BigNumberish];
  export type OutputTuple = [oldPeriod: bigint, newPeriod: bigint];
  export interface OutputObject {
    oldPeriod: bigint;
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFiledEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    amount: BigNumberish,
    documentHash: string
  ];
  export type OutputTuple = [
    policyId: string,
    owner: string,
    amount: bigint,
    documentHash: string
  ];
  export interface OutputObject {
    policyId: string;
    owner: string;
    amount: bigint;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCancelledEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    refundAmount: BigNumberish
  ];
  export type OutputTuple = [
    policyId: string,
    owner: string,
    refundAmount: bigint
  ];
  export interface OutputObject {
    policyId: string;
    owner: string;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyExpiredEvent {
  export type InputTuple = [policyId: BytesLike, owner: AddressLike];
  export type OutputTuple = [policyId: string, owner: string];
  export interface OutputObject {
    policyId: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyPurchasedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    premium: BigNumberish,
    sumAssured: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    policyId: string,
    owner: string,
    premium: bigint,
    sumAssured: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    policyId: string;
    owner: string;
    premium: bigint;
    sumAssured: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyRenewedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    premium: BigNumberish,
    newExpiry: BigNumberish
  ];
  export type OutputTuple = [
    policyId: string,
    owner: string,
    premium: bigint,
    newExpiry: bigint
  ];
  export interface OutputObject {
    policyId: string;
    owner: string;
    premium: bigint;
    newExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [policyId: string, owner: string, amount: bigint];
  export interface OutputObject {
    policyId: string;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedSignerUpdatedEvent {
  export type InputTuple = [oldSigner: AddressLike, newSigner: AddressLike];
  export type OutputTuple = [oldSigner: string, newSigner: string];
  export interface OutputObject {
    oldSigner: string;
    newSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PolicyBase extends BaseContract {
  connect(runner?: ContractRunner | null): PolicyBase;
  waitForDeployment(): Promise<this>;

  interface: PolicyBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  approveClaim: TypedContractMethod<
    [policyId: BytesLike],
    [bigint],
    "nonpayable"
  >;

  cancelPolicy: TypedContractMethod<
    [policyId: BytesLike, refundAmount: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  claimExpiryPeriod: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fileClaim: TypedContractMethod<
    [
      policyId: BytesLike,
      amount: BigNumberish,
      documentHash: string,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getClaim: TypedContractMethod<
    [policyId: BytesLike],
    [PolicyBase.ClaimRequestStructOutput],
    "view"
  >;

  getPolicy: TypedContractMethod<
    [policyId: BytesLike],
    [PolicyBase.PolicyStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantAdminRole: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  markExpiredPolicy: TypedContractMethod<
    [policyId: BytesLike],
    [void],
    "nonpayable"
  >;

  purchasePolicy: TypedContractMethod<
    [
      owner: AddressLike,
      premium: BigNumberish,
      sumAssured: BigNumberish,
      duration: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;

  renewPolicy: TypedContractMethod<
    [
      policyId: BytesLike,
      premium: BigNumberish,
      duration: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAdminRole: TypedContractMethod<
    [admin: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setClaimExpiryPeriod: TypedContractMethod<
    [periodInDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedSigner: TypedContractMethod<
    [newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  trustedSigner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveClaim"
  ): TypedContractMethod<[policyId: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelPolicy"
  ): TypedContractMethod<
    [policyId: BytesLike, refundAmount: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimExpiryPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fileClaim"
  ): TypedContractMethod<
    [
      policyId: BytesLike,
      amount: BigNumberish,
      documentHash: string,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [policyId: BytesLike],
    [PolicyBase.ClaimRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPolicy"
  ): TypedContractMethod<
    [policyId: BytesLike],
    [PolicyBase.PolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAdminRole"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "markExpiredPolicy"
  ): TypedContractMethod<[policyId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchasePolicy"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      premium: BigNumberish,
      sumAssured: BigNumberish,
      duration: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renewPolicy"
  ): TypedContractMethod<
    [
      policyId: BytesLike,
      premium: BigNumberish,
      duration: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAdminRole"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimExpiryPeriod"
  ): TypedContractMethod<[periodInDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedSigner"
  ): TypedContractMethod<[newSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "trustedSigner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminGranted"
  ): TypedContractEvent<
    AdminGrantedEvent.InputTuple,
    AdminGrantedEvent.OutputTuple,
    AdminGrantedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimApproved"
  ): TypedContractEvent<
    ClaimApprovedEvent.InputTuple,
    ClaimApprovedEvent.OutputTuple,
    ClaimApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimExpiryPeriodUpdated"
  ): TypedContractEvent<
    ClaimExpiryPeriodUpdatedEvent.InputTuple,
    ClaimExpiryPeriodUpdatedEvent.OutputTuple,
    ClaimExpiryPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFiled"
  ): TypedContractEvent<
    ClaimFiledEvent.InputTuple,
    ClaimFiledEvent.OutputTuple,
    ClaimFiledEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCancelled"
  ): TypedContractEvent<
    PolicyCancelledEvent.InputTuple,
    PolicyCancelledEvent.OutputTuple,
    PolicyCancelledEvent.OutputObject
  >;
  getEvent(
    key: "PolicyExpired"
  ): TypedContractEvent<
    PolicyExpiredEvent.InputTuple,
    PolicyExpiredEvent.OutputTuple,
    PolicyExpiredEvent.OutputObject
  >;
  getEvent(
    key: "PolicyPurchased"
  ): TypedContractEvent<
    PolicyPurchasedEvent.InputTuple,
    PolicyPurchasedEvent.OutputTuple,
    PolicyPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyRenewed"
  ): TypedContractEvent<
    PolicyRenewedEvent.InputTuple,
    PolicyRenewedEvent.OutputTuple,
    PolicyRenewedEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedSignerUpdated"
  ): TypedContractEvent<
    TrustedSignerUpdatedEvent.InputTuple,
    TrustedSignerUpdatedEvent.OutputTuple,
    TrustedSignerUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminGranted(address)": TypedContractEvent<
      AdminGrantedEvent.InputTuple,
      AdminGrantedEvent.OutputTuple,
      AdminGrantedEvent.OutputObject
    >;
    AdminGranted: TypedContractEvent<
      AdminGrantedEvent.InputTuple,
      AdminGrantedEvent.OutputTuple,
      AdminGrantedEvent.OutputObject
    >;

    "ClaimApproved(bytes32,address,uint256)": TypedContractEvent<
      ClaimApprovedEvent.InputTuple,
      ClaimApprovedEvent.OutputTuple,
      ClaimApprovedEvent.OutputObject
    >;
    ClaimApproved: TypedContractEvent<
      ClaimApprovedEvent.InputTuple,
      ClaimApprovedEvent.OutputTuple,
      ClaimApprovedEvent.OutputObject
    >;

    "ClaimExpiryPeriodUpdated(uint256,uint256)": TypedContractEvent<
      ClaimExpiryPeriodUpdatedEvent.InputTuple,
      ClaimExpiryPeriodUpdatedEvent.OutputTuple,
      ClaimExpiryPeriodUpdatedEvent.OutputObject
    >;
    ClaimExpiryPeriodUpdated: TypedContractEvent<
      ClaimExpiryPeriodUpdatedEvent.InputTuple,
      ClaimExpiryPeriodUpdatedEvent.OutputTuple,
      ClaimExpiryPeriodUpdatedEvent.OutputObject
    >;

    "ClaimFiled(bytes32,address,uint256,string)": TypedContractEvent<
      ClaimFiledEvent.InputTuple,
      ClaimFiledEvent.OutputTuple,
      ClaimFiledEvent.OutputObject
    >;
    ClaimFiled: TypedContractEvent<
      ClaimFiledEvent.InputTuple,
      ClaimFiledEvent.OutputTuple,
      ClaimFiledEvent.OutputObject
    >;

    "PolicyCancelled(bytes32,address,uint256)": TypedContractEvent<
      PolicyCancelledEvent.InputTuple,
      PolicyCancelledEvent.OutputTuple,
      PolicyCancelledEvent.OutputObject
    >;
    PolicyCancelled: TypedContractEvent<
      PolicyCancelledEvent.InputTuple,
      PolicyCancelledEvent.OutputTuple,
      PolicyCancelledEvent.OutputObject
    >;

    "PolicyExpired(bytes32,address)": TypedContractEvent<
      PolicyExpiredEvent.InputTuple,
      PolicyExpiredEvent.OutputTuple,
      PolicyExpiredEvent.OutputObject
    >;
    PolicyExpired: TypedContractEvent<
      PolicyExpiredEvent.InputTuple,
      PolicyExpiredEvent.OutputTuple,
      PolicyExpiredEvent.OutputObject
    >;

    "PolicyPurchased(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;
    PolicyPurchased: TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;

    "PolicyRenewed(bytes32,address,uint256,uint256)": TypedContractEvent<
      PolicyRenewedEvent.InputTuple,
      PolicyRenewedEvent.OutputTuple,
      PolicyRenewedEvent.OutputObject
    >;
    PolicyRenewed: TypedContractEvent<
      PolicyRenewedEvent.InputTuple,
      PolicyRenewedEvent.OutputTuple,
      PolicyRenewedEvent.OutputObject
    >;

    "RefundIssued(bytes32,address,uint256)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TrustedSignerUpdated(address,address)": TypedContractEvent<
      TrustedSignerUpdatedEvent.InputTuple,
      TrustedSignerUpdatedEvent.OutputTuple,
      TrustedSignerUpdatedEvent.OutputObject
    >;
    TrustedSignerUpdated: TypedContractEvent<
      TrustedSignerUpdatedEvent.InputTuple,
      TrustedSignerUpdatedEvent.OutputTuple,
      TrustedSignerUpdatedEvent.OutputObject
    >;
  };
}
